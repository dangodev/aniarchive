datasource db {
  provider = "sqlite"
  url      = "file:./aniarchive.db"
}

generator prisma_client {
  provider = "prisma-client-js"
}

model Film {
  // /comment A unique ID for this film
  id                 String              @id
  // /comment Title of the film in the original language
  title              String              @unique
  // /comment Japanese title
  titleJP            String              @unique
  // /comment English title
  titleEN            String              @unique
  // /comment Initial release year of the film
  releaseYear        Int
  // /comment Main image for the film
  image              Image               @relation(fields: [imageId], references: [id])
  imageId            String
  // /comment Releases of the film
  releases           Release[]
  // /comment Studio that produced the film
  studio             Studio?             @relation(fields: [studioId], references: [id])
  studioId           String?
  // /comment URL to watch the trailer
  trailer            String?
  // /comment Animation sequences for the film
  animationSequences AnimationSequence[]
  // /comment The composers of the film
  composers          Person[]            @relation("FilmComposers", references: [id])
  // /comment The directors of the film
  directors          Person[]            @relation("FilmDirectors", references: [id])
  // /comment The writers of the film
  writers            Person[]            @relation("FilmWriters", references: [id])
}

model AnimationSequence {
  id             String   @default(cuid()) @id
  artists        Person[] @relation(references: [id])
  film           Film     @relation(fields: [filmId], references: [id])
  filmId         String
  image          Image    @relation(fields: [imageId], references: [id])
  imageId        String
  notes          String?
  timestampStart Int?
  timestampEnd   Int?
  url            String
}

model Image {
  id                String              @default(cuid()) @id
  copyright         String?
  title             String
  url               String              @unique
  releaseId         String?
  Film              Film[]
  AnimationSequence AnimationSequence[]
  Person            Person[]
  Release           Release?            @relation("ReleaseImages", fields: [releaseId], references: [id])
  Studio            Studio[]
}

model Person {
  // /comment A unique ID for this person
  id          String              @id
  // /comment Last name of this person
  lastName    String
  // /comment First name of this person
  firstName   String
  // /comment This personâ€™s name in Kanji (Japanese only)
  kanji       String?
  // /comment Alias, usually if a person is better known by this
  alias       String?
  // /comment Image of this person
  image       Image?              @relation(fields: [imageId], references: [id])
  imageId     String?
  // /comment A short bio for this person
  description String?
  // /comment Country this person is associated with
  country     String
  // /comment Birthdays are split into day/month/year separately because we may not know all parts!
  birthYear   Int?
  // /comment Birthdays are split into day/month/year separately because we may not know all parts!
  birthMonth  Int?
  // /comment Birthdays are split into day/month/year separately because we may not know all parts!
  birthDay    Int?
  // /comment Death days are split into day/month/year separately because we may not know all parts!
  deathYear   Int?
  // /comment Death days are split into day/month/year separately because we may not know all parts!
  deathMonth  Int?
  // /comment Death days are split into day/month/year separately because we may not know all parts!
  deathDay    Int?
  // /comment Website of this person
  website     String?
  // /comment Films this person animated
  animated    AnimationSequence[] @relation(references: [id])
  // /comment Films this person directed
  directed    Film[]              @relation("FilmDirectors", references: [id])
  // /comment Films this person wrote
  wrote       Film[]              @relation("FilmWriters", references: [id])
  // /comment Films this person composed the music for
  composed    Film[]              @relation("FilmComposers", references: [id])
  // /comment Studios this person founded
  founded     Studio[]            @relation(references: [id])
}

model Release {
  id           String  @default(cuid()) @id
  film         Film    @relation(fields: [filmId], references: [id])
  filmId       String
  images       Image[] @relation("ReleaseImages")
  releaseYear  Int
  releaseMonth Int?
  releaseDay   Int?
  country      String
  // /comment Format for the release (e.g. DVD / BluRay / Television)
  format       String
  notes        String?
  runtime      Int
}

model Studio {
  id          String   @id
  name        String   @unique
  image       Image?   @relation(fields: [imageId], references: [id])
  imageId     String?
  foundedYear Int
  films       Film[]
  city        String?
  country     String
  founders    Person[] @relation(references: [id])
}
