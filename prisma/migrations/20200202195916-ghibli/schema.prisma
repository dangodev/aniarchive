generator prisma {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

enum Country {
  AU
  BR
  CA
  CN
  ES
  FR
  GB
  IT
  JP
  MX
  NZ
  TR
  UA
  US
}

model Film {
  ///comment A unique ID for this film
  id             String          @id
  ///comment Animators for this film
  animators      Person[]        @relation(name: "FilmAnimators")
  ///comment The composers of the film
  composers      Person[]        @relation(name: "FilmComposers")
  ///comment The directors of the film
  directors      Person[]        @relation(name: "FilmDirectors")
  ///comment Animation frame sequences for the film
  frameSequences FrameSequence[] @relation(name: "FilmFrameSequence")
  ///comment Main image for the film
  image          Image           @relation(name: "FilmImage")
  ///comment Releases of the film
  releases       Release[]
  ///comment Initial release year of the film
  releaseYear    Int
  ///comment Studio that produced the film
  studio         Studio?
  ///comment Title of the film in the original language
  title          String          @unique
  ///comment Japanese title
  titleJP        String          @unique
  ///comment English title
  titleEN        String          @unique
  ///comment URL to watch the trailer
  trailer        String?
}

model FrameSequence {
  id             String   @default(cuid()) @id
  artists        Person[] @relation(name: "FrameSequenceArtists")
  film           Film     @relation(name: "FilmFrameSequence")
  image          Image    @relation(name: "FrameSequenceImage")
  notes          String
  timestampStart Int?
  timestampEnd   Int?
  video          String
}

model Image {
  id        String  @default(cuid()) @id
  copyright String?
  name      String
  url       String  @unique
}

model Person {
  ///comment A unique ID for this person
  id          String   @id
  ///comment Alias, usually if a person is better known by this
  alias       String?
  ///comment Films this person animated
  animated    Film[]   @relation(name: "FilmArtists")
  ///comment Birthdays are split into day/month/year separately because we may not know all parts!
  birthMonth  Int?
  ///comment Birthdays are split into day/month/year separately because we may not know all parts!
  birthDay    Int?
  ///comment Birthdays are split into day/month/year separately because we may not know all parts!
  birthYear   Int?
  ///comment Country this person is associated with
  country     Country
  ///comment Films this person composed the music for
  composed    Film[]   @relation(name: "FilmComposers")
  ///comment Films this person directed
  directed    Film[]   @relation(name: "FilmDirectors")
  ///comment Death days are split into day/month/year separately because we may not know all parts!
  deathDay    Int?
  ///comment Death days are split into day/month/year separately because we may not know all parts!
  deathMonth  Int?
  ///comment Death days are split into day/month/year separately because we may not know all parts!
  deathYear   Int?
  ///comment A short bio for this person
  description String?
  ///comment First name of this person
  firstName   String
  founded     Studio[] @relation(name: "StudioFounders")
  ///comment Image of this person
  image       Image?   @relation(name: "PersonImage")
  ///comment This personâ€™s name in Kanji (Japanese only)
  kanji       String?
  ///comment Last name of this person
  lastName    String
  ///comment Website of this person
  website     String?
}

model Release {
  id           String  @default(cuid()) @id
  country      Country
  film         Film
  format       String
  images       Image[] @relation(name: "ReleaseImages")
  notes        String?
  region       String
  releaseDay   Int?
  releaseMonth Int?
  releaseYear  Int
  runtime      Int
}

model Studio {
  id          String   @id
  city        String?
  country     Country
  films       Film[]
  foundedYear Int
  founders    Person[] @relation(name: "StudioFounders")
  image       Image?   @relation(name: "StudioImage")
  name        String   @unique
}
