### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


input BooleanFilter {
  equals: Boolean
  not: Boolean
}

enum Country {
  AU
  BR
  CA
  CN
  ES
  FR
  GB
  IT
  JP
  MX
  NZ
  TR
  UA
  US
}

type Film {
  animators(after: String, before: String, first: Int, last: Int, orderBy: FilmAnimatorsOrderByInput, skip: Int, where: FilmAnimatorsWhereInput): [Person!]!
  composers(after: String, before: String, first: Int, last: Int, orderBy: FilmComposersOrderByInput, skip: Int, where: FilmComposersWhereInput): [Person!]!
  directors(after: String, before: String, first: Int, last: Int, orderBy: FilmDirectorsOrderByInput, skip: Int, where: FilmDirectorsWhereInput): [Person!]!
  id: String!
  image: Image!
  releases(after: ID, before: ID, first: Int, last: Int, orderBy: FilmReleasesOrderByInput, skip: Int): [Release!]!
  releaseYear: Int!
  studio: Studio
  title: String!
  titleEN: String!
  titleJP: String!
}

input FilmAnimatorsOrderByInput {
  alias: OrderByArg
  birthYear: OrderByArg
  country: OrderByArg
  firstName: OrderByArg
  lastName: OrderByArg
}

input FilmAnimatorsWhereInput {
  birthYear: NullableIntFilter
  country: Country
}

input FilmComposersOrderByInput {
  alias: OrderByArg
  birthYear: OrderByArg
  country: OrderByArg
  firstName: OrderByArg
  lastName: OrderByArg
}

input FilmComposersWhereInput {
  birthYear: NullableIntFilter
  country: Country
}

input FilmCreateInput {
  animators: PersonCreateManyWithoutAnimatorsInput
  composers: PersonCreateManyWithoutComposersInput
  directors: PersonCreateManyWithoutDirectorsInput
  frameSequences: FrameSequenceCreateManyWithoutFrameSequencesInput
  id: String!
  image: ImageCreateOneWithoutImageInput!
  person: PersonCreateOneWithoutPersonInput
  releases: ReleaseCreateManyWithoutReleasesInput
  releaseYear: Int!
  studio: StudioCreateOneWithoutStudioInput
  title: String!
  titleEN: String!
  titleJP: String!
}

input FilmCreateManyWithoutAnimatedInput {
  connect: [FilmWhereUniqueInput!]
  create: [FilmCreateWithoutPersonInput!]
}

input FilmCreateManyWithoutComposedInput {
  connect: [FilmWhereUniqueInput!]
  create: [FilmCreateWithoutComposersInput!]
}

input FilmCreateManyWithoutDirectedInput {
  connect: [FilmWhereUniqueInput!]
  create: [FilmCreateWithoutDirectorsInput!]
}

input FilmCreateManyWithoutFilmsInput {
  connect: [FilmWhereUniqueInput!]
  create: [FilmCreateWithoutStudioInput!]
}

input FilmCreateOneWithoutFilmInput {
  connect: FilmWhereUniqueInput
  create: FilmCreateWithoutAnimatorsInput
}

input FilmCreateWithoutAnimatorsInput {
  composers: PersonCreateManyWithoutComposersInput
  directors: PersonCreateManyWithoutDirectorsInput
  frameSequences: FrameSequenceCreateManyWithoutFrameSequencesInput
  id: String!
  image: ImageCreateOneWithoutImageInput!
  person: PersonCreateOneWithoutPersonInput
  releases: ReleaseCreateManyWithoutReleasesInput
  releaseYear: Int!
  studio: StudioCreateOneWithoutStudioInput
  title: String!
  titleEN: String!
  titleJP: String!
}

input FilmCreateWithoutComposersInput {
  animators: PersonCreateManyWithoutAnimatorsInput
  directors: PersonCreateManyWithoutDirectorsInput
  frameSequences: FrameSequenceCreateManyWithoutFrameSequencesInput
  id: String!
  image: ImageCreateOneWithoutImageInput!
  person: PersonCreateOneWithoutPersonInput
  releases: ReleaseCreateManyWithoutReleasesInput
  releaseYear: Int!
  studio: StudioCreateOneWithoutStudioInput
  title: String!
  titleEN: String!
  titleJP: String!
}

input FilmCreateWithoutDirectorsInput {
  animators: PersonCreateManyWithoutAnimatorsInput
  composers: PersonCreateManyWithoutComposersInput
  frameSequences: FrameSequenceCreateManyWithoutFrameSequencesInput
  id: String!
  image: ImageCreateOneWithoutImageInput!
  person: PersonCreateOneWithoutPersonInput
  releases: ReleaseCreateManyWithoutReleasesInput
  releaseYear: Int!
  studio: StudioCreateOneWithoutStudioInput
  title: String!
  titleEN: String!
  titleJP: String!
}

input FilmCreateWithoutFrameSequencesInput {
  animators: PersonCreateManyWithoutAnimatorsInput
  composers: PersonCreateManyWithoutComposersInput
  directors: PersonCreateManyWithoutDirectorsInput
  id: String!
  image: ImageCreateOneWithoutImageInput!
  person: PersonCreateOneWithoutPersonInput
  releases: ReleaseCreateManyWithoutReleasesInput
  releaseYear: Int!
  studio: StudioCreateOneWithoutStudioInput
  title: String!
  titleEN: String!
  titleJP: String!
}

input FilmCreateWithoutImageInput {
  animators: PersonCreateManyWithoutAnimatorsInput
  composers: PersonCreateManyWithoutComposersInput
  directors: PersonCreateManyWithoutDirectorsInput
  frameSequences: FrameSequenceCreateManyWithoutFrameSequencesInput
  id: String!
  person: PersonCreateOneWithoutPersonInput
  releases: ReleaseCreateManyWithoutReleasesInput
  releaseYear: Int!
  studio: StudioCreateOneWithoutStudioInput
  title: String!
  titleEN: String!
  titleJP: String!
}

input FilmCreateWithoutPersonInput {
  animators: PersonCreateManyWithoutAnimatorsInput
  composers: PersonCreateManyWithoutComposersInput
  directors: PersonCreateManyWithoutDirectorsInput
  frameSequences: FrameSequenceCreateManyWithoutFrameSequencesInput
  id: String!
  image: ImageCreateOneWithoutImageInput!
  releases: ReleaseCreateManyWithoutReleasesInput
  releaseYear: Int!
  studio: StudioCreateOneWithoutStudioInput
  title: String!
  titleEN: String!
  titleJP: String!
}

input FilmCreateWithoutReleasesInput {
  animators: PersonCreateManyWithoutAnimatorsInput
  composers: PersonCreateManyWithoutComposersInput
  directors: PersonCreateManyWithoutDirectorsInput
  frameSequences: FrameSequenceCreateManyWithoutFrameSequencesInput
  id: String!
  image: ImageCreateOneWithoutImageInput!
  person: PersonCreateOneWithoutPersonInput
  releaseYear: Int!
  studio: StudioCreateOneWithoutStudioInput
  title: String!
  titleEN: String!
  titleJP: String!
}

input FilmCreateWithoutStudioInput {
  animators: PersonCreateManyWithoutAnimatorsInput
  composers: PersonCreateManyWithoutComposersInput
  directors: PersonCreateManyWithoutDirectorsInput
  frameSequences: FrameSequenceCreateManyWithoutFrameSequencesInput
  id: String!
  image: ImageCreateOneWithoutImageInput!
  person: PersonCreateOneWithoutPersonInput
  releases: ReleaseCreateManyWithoutReleasesInput
  releaseYear: Int!
  title: String!
  titleEN: String!
  titleJP: String!
}

input FilmDirectorsOrderByInput {
  alias: OrderByArg
  birthYear: OrderByArg
  country: OrderByArg
  firstName: OrderByArg
  lastName: OrderByArg
}

input FilmDirectorsWhereInput {
  birthYear: NullableIntFilter
  country: Country
}

input FilmFilter {
  every: FilmWhereInput
  none: FilmWhereInput
  some: FilmWhereInput
}

input FilmReleasesOrderByInput {
  releaseYear: OrderByArg
}

input FilmScalarWhereInput {
  AND: [FilmScalarWhereInput!]
  animators: PersonFilter
  composers: PersonFilter
  directors: PersonFilter
  frameSequences: FrameSequenceFilter
  id: StringFilter
  NOT: [FilmScalarWhereInput!]
  OR: [FilmScalarWhereInput!]
  releases: ReleaseFilter
  releaseYear: IntFilter
  title: StringFilter
  titleEN: StringFilter
  titleJP: StringFilter
}

input FilmUpdateInput {
  animators: PersonUpdateManyWithoutFilmInput
  composers: PersonUpdateManyWithoutComposedInput
  directors: PersonUpdateManyWithoutDirectedInput
  frameSequences: FrameSequenceUpdateManyWithoutFilmInput
  id: String
  image: ImageUpdateOneRequiredWithoutFilmsInput
  person: PersonUpdateOneWithoutAnimatedInput
  releases: ReleaseUpdateManyWithoutFilmInput
  releaseYear: Int
  studio: StudioUpdateOneWithoutFilmsInput
  title: String
  titleEN: String
  titleJP: String
}

input FilmUpdateManyDataInput {
  id: String
  releaseYear: Int
  title: String
  titleEN: String
  titleJP: String
}

input FilmUpdateManyWithoutComposersInput {
  connect: [FilmWhereUniqueInput!]
  create: [FilmCreateWithoutComposersInput!]
  delete: [FilmWhereUniqueInput!]
  deleteMany: [FilmScalarWhereInput!]
  disconnect: [FilmWhereUniqueInput!]
  set: [FilmWhereUniqueInput!]
  update: [FilmUpdateWithWhereUniqueWithoutComposersInput!]
  updateMany: [FilmUpdateManyWithWhereNestedInput!]
  upsert: [FilmUpsertWithWhereUniqueWithoutComposersInput!]
}

input FilmUpdateManyWithoutDirectorsInput {
  connect: [FilmWhereUniqueInput!]
  create: [FilmCreateWithoutDirectorsInput!]
  delete: [FilmWhereUniqueInput!]
  deleteMany: [FilmScalarWhereInput!]
  disconnect: [FilmWhereUniqueInput!]
  set: [FilmWhereUniqueInput!]
  update: [FilmUpdateWithWhereUniqueWithoutDirectorsInput!]
  updateMany: [FilmUpdateManyWithWhereNestedInput!]
  upsert: [FilmUpsertWithWhereUniqueWithoutDirectorsInput!]
}

input FilmUpdateManyWithoutImageInput {
  connect: [FilmWhereUniqueInput!]
  create: [FilmCreateWithoutImageInput!]
  delete: [FilmWhereUniqueInput!]
  deleteMany: [FilmScalarWhereInput!]
  disconnect: [FilmWhereUniqueInput!]
  set: [FilmWhereUniqueInput!]
  update: [FilmUpdateWithWhereUniqueWithoutImageInput!]
  updateMany: [FilmUpdateManyWithWhereNestedInput!]
  upsert: [FilmUpsertWithWhereUniqueWithoutImageInput!]
}

input FilmUpdateManyWithoutPersonInput {
  connect: [FilmWhereUniqueInput!]
  create: [FilmCreateWithoutPersonInput!]
  delete: [FilmWhereUniqueInput!]
  deleteMany: [FilmScalarWhereInput!]
  disconnect: [FilmWhereUniqueInput!]
  set: [FilmWhereUniqueInput!]
  update: [FilmUpdateWithWhereUniqueWithoutPersonInput!]
  updateMany: [FilmUpdateManyWithWhereNestedInput!]
  upsert: [FilmUpsertWithWhereUniqueWithoutPersonInput!]
}

input FilmUpdateManyWithoutStudioInput {
  connect: [FilmWhereUniqueInput!]
  create: [FilmCreateWithoutStudioInput!]
  delete: [FilmWhereUniqueInput!]
  deleteMany: [FilmScalarWhereInput!]
  disconnect: [FilmWhereUniqueInput!]
  set: [FilmWhereUniqueInput!]
  update: [FilmUpdateWithWhereUniqueWithoutStudioInput!]
  updateMany: [FilmUpdateManyWithWhereNestedInput!]
  upsert: [FilmUpsertWithWhereUniqueWithoutStudioInput!]
}

input FilmUpdateManyWithWhereNestedInput {
  data: FilmUpdateManyDataInput!
  where: FilmScalarWhereInput!
}

input FilmUpdateOneRequiredWithoutFrameSequencesInput {
  connect: FilmWhereUniqueInput
  create: FilmCreateWithoutFrameSequencesInput
  update: FilmUpdateWithoutFrameSequencesDataInput
  upsert: FilmUpsertWithoutFrameSequencesInput
}

input FilmUpdateOneRequiredWithoutReleasesInput {
  connect: FilmWhereUniqueInput
  create: FilmCreateWithoutReleasesInput
  update: FilmUpdateWithoutReleasesDataInput
  upsert: FilmUpsertWithoutReleasesInput
}

input FilmUpdateOneWithoutAnimatorsInput {
  connect: FilmWhereUniqueInput
  create: FilmCreateWithoutAnimatorsInput
  delete: Boolean
  disconnect: Boolean
  update: FilmUpdateWithoutAnimatorsDataInput
  upsert: FilmUpsertWithoutAnimatorsInput
}

input FilmUpdateWithoutAnimatorsDataInput {
  composers: PersonUpdateManyWithoutComposedInput
  directors: PersonUpdateManyWithoutDirectedInput
  frameSequences: FrameSequenceUpdateManyWithoutFilmInput
  id: String
  image: ImageUpdateOneRequiredWithoutFilmsInput
  person: PersonUpdateOneWithoutAnimatedInput
  releases: ReleaseUpdateManyWithoutFilmInput
  releaseYear: Int
  studio: StudioUpdateOneWithoutFilmsInput
  title: String
  titleEN: String
  titleJP: String
}

input FilmUpdateWithoutComposersDataInput {
  animators: PersonUpdateManyWithoutFilmInput
  directors: PersonUpdateManyWithoutDirectedInput
  frameSequences: FrameSequenceUpdateManyWithoutFilmInput
  id: String
  image: ImageUpdateOneRequiredWithoutFilmsInput
  person: PersonUpdateOneWithoutAnimatedInput
  releases: ReleaseUpdateManyWithoutFilmInput
  releaseYear: Int
  studio: StudioUpdateOneWithoutFilmsInput
  title: String
  titleEN: String
  titleJP: String
}

input FilmUpdateWithoutDirectorsDataInput {
  animators: PersonUpdateManyWithoutFilmInput
  composers: PersonUpdateManyWithoutComposedInput
  frameSequences: FrameSequenceUpdateManyWithoutFilmInput
  id: String
  image: ImageUpdateOneRequiredWithoutFilmsInput
  person: PersonUpdateOneWithoutAnimatedInput
  releases: ReleaseUpdateManyWithoutFilmInput
  releaseYear: Int
  studio: StudioUpdateOneWithoutFilmsInput
  title: String
  titleEN: String
  titleJP: String
}

input FilmUpdateWithoutFrameSequencesDataInput {
  animators: PersonUpdateManyWithoutFilmInput
  composers: PersonUpdateManyWithoutComposedInput
  directors: PersonUpdateManyWithoutDirectedInput
  id: String
  image: ImageUpdateOneRequiredWithoutFilmsInput
  person: PersonUpdateOneWithoutAnimatedInput
  releases: ReleaseUpdateManyWithoutFilmInput
  releaseYear: Int
  studio: StudioUpdateOneWithoutFilmsInput
  title: String
  titleEN: String
  titleJP: String
}

input FilmUpdateWithoutImageDataInput {
  animators: PersonUpdateManyWithoutFilmInput
  composers: PersonUpdateManyWithoutComposedInput
  directors: PersonUpdateManyWithoutDirectedInput
  frameSequences: FrameSequenceUpdateManyWithoutFilmInput
  id: String
  person: PersonUpdateOneWithoutAnimatedInput
  releases: ReleaseUpdateManyWithoutFilmInput
  releaseYear: Int
  studio: StudioUpdateOneWithoutFilmsInput
  title: String
  titleEN: String
  titleJP: String
}

input FilmUpdateWithoutPersonDataInput {
  animators: PersonUpdateManyWithoutFilmInput
  composers: PersonUpdateManyWithoutComposedInput
  directors: PersonUpdateManyWithoutDirectedInput
  frameSequences: FrameSequenceUpdateManyWithoutFilmInput
  id: String
  image: ImageUpdateOneRequiredWithoutFilmsInput
  releases: ReleaseUpdateManyWithoutFilmInput
  releaseYear: Int
  studio: StudioUpdateOneWithoutFilmsInput
  title: String
  titleEN: String
  titleJP: String
}

input FilmUpdateWithoutReleasesDataInput {
  animators: PersonUpdateManyWithoutFilmInput
  composers: PersonUpdateManyWithoutComposedInput
  directors: PersonUpdateManyWithoutDirectedInput
  frameSequences: FrameSequenceUpdateManyWithoutFilmInput
  id: String
  image: ImageUpdateOneRequiredWithoutFilmsInput
  person: PersonUpdateOneWithoutAnimatedInput
  releaseYear: Int
  studio: StudioUpdateOneWithoutFilmsInput
  title: String
  titleEN: String
  titleJP: String
}

input FilmUpdateWithoutStudioDataInput {
  animators: PersonUpdateManyWithoutFilmInput
  composers: PersonUpdateManyWithoutComposedInput
  directors: PersonUpdateManyWithoutDirectedInput
  frameSequences: FrameSequenceUpdateManyWithoutFilmInput
  id: String
  image: ImageUpdateOneRequiredWithoutFilmsInput
  person: PersonUpdateOneWithoutAnimatedInput
  releases: ReleaseUpdateManyWithoutFilmInput
  releaseYear: Int
  title: String
  titleEN: String
  titleJP: String
}

input FilmUpdateWithWhereUniqueWithoutComposersInput {
  data: FilmUpdateWithoutComposersDataInput!
  where: FilmWhereUniqueInput!
}

input FilmUpdateWithWhereUniqueWithoutDirectorsInput {
  data: FilmUpdateWithoutDirectorsDataInput!
  where: FilmWhereUniqueInput!
}

input FilmUpdateWithWhereUniqueWithoutImageInput {
  data: FilmUpdateWithoutImageDataInput!
  where: FilmWhereUniqueInput!
}

input FilmUpdateWithWhereUniqueWithoutPersonInput {
  data: FilmUpdateWithoutPersonDataInput!
  where: FilmWhereUniqueInput!
}

input FilmUpdateWithWhereUniqueWithoutStudioInput {
  data: FilmUpdateWithoutStudioDataInput!
  where: FilmWhereUniqueInput!
}

input FilmUpsertWithoutAnimatorsInput {
  create: FilmCreateWithoutAnimatorsInput!
  update: FilmUpdateWithoutAnimatorsDataInput!
}

input FilmUpsertWithoutFrameSequencesInput {
  create: FilmCreateWithoutFrameSequencesInput!
  update: FilmUpdateWithoutFrameSequencesDataInput!
}

input FilmUpsertWithoutReleasesInput {
  create: FilmCreateWithoutReleasesInput!
  update: FilmUpdateWithoutReleasesDataInput!
}

input FilmUpsertWithWhereUniqueWithoutComposersInput {
  create: FilmCreateWithoutComposersInput!
  update: FilmUpdateWithoutComposersDataInput!
  where: FilmWhereUniqueInput!
}

input FilmUpsertWithWhereUniqueWithoutDirectorsInput {
  create: FilmCreateWithoutDirectorsInput!
  update: FilmUpdateWithoutDirectorsDataInput!
  where: FilmWhereUniqueInput!
}

input FilmUpsertWithWhereUniqueWithoutImageInput {
  create: FilmCreateWithoutImageInput!
  update: FilmUpdateWithoutImageDataInput!
  where: FilmWhereUniqueInput!
}

input FilmUpsertWithWhereUniqueWithoutPersonInput {
  create: FilmCreateWithoutPersonInput!
  update: FilmUpdateWithoutPersonDataInput!
  where: FilmWhereUniqueInput!
}

input FilmUpsertWithWhereUniqueWithoutStudioInput {
  create: FilmCreateWithoutStudioInput!
  update: FilmUpdateWithoutStudioDataInput!
  where: FilmWhereUniqueInput!
}

input FilmWhereInput {
  AND: [FilmWhereInput!]
  animators: PersonFilter
  composers: PersonFilter
  directors: PersonFilter
  frameSequences: FrameSequenceFilter
  id: StringFilter
  image: ImageWhereInput
  NOT: [FilmWhereInput!]
  OR: [FilmWhereInput!]
  person: PersonWhereInput
  releases: ReleaseFilter
  releaseYear: IntFilter
  studio: StudioWhereInput
  title: StringFilter
  titleEN: StringFilter
  titleJP: StringFilter
}

input FilmWhereUniqueInput {
  id: String
  title: String
  titleEN: String
  titleJP: String
}

input FrameCreateManyWithoutFramesInput {
  connect: [FrameWhereUniqueInput!]
  create: [FrameCreateWithoutImageInput!]
}

input FrameCreateWithoutArtistInput {
  frameSequence: FrameSequenceCreateOneWithoutFrameSequenceInput
  id: ID
  image: ImageCreateOneWithoutImageInput!
  keyframe: Boolean!
  notes: String!
  order: Int!
}

input FrameCreateWithoutFrameSequenceInput {
  artist: PersonCreateOneWithoutArtistInput!
  id: ID
  image: ImageCreateOneWithoutImageInput!
  keyframe: Boolean!
  notes: String!
  order: Int!
}

input FrameCreateWithoutImageInput {
  artist: PersonCreateOneWithoutArtistInput!
  frameSequence: FrameSequenceCreateOneWithoutFrameSequenceInput
  id: ID
  keyframe: Boolean!
  notes: String!
  order: Int!
}

input FrameFilter {
  every: FrameWhereInput
  none: FrameWhereInput
  some: FrameWhereInput
}

input FrameScalarWhereInput {
  AND: [FrameScalarWhereInput!]
  id: StringFilter
  keyframe: BooleanFilter
  NOT: [FrameScalarWhereInput!]
  notes: StringFilter
  OR: [FrameScalarWhereInput!]
  order: IntFilter
}

input FrameSequenceCreateManyWithoutFrameSequencesInput {
  connect: [FrameSequenceWhereUniqueInput!]
  create: [FrameSequenceCreateWithoutFilmInput!]
}

input FrameSequenceCreateOneWithoutFrameSequenceInput {
  connect: FrameSequenceWhereUniqueInput
  create: FrameSequenceCreateWithoutArtistsInput
}

input FrameSequenceCreateWithoutArtistsInput {
  film: FilmCreateOneWithoutFilmInput!
  frames: FrameCreateManyWithoutFramesInput
  id: ID
  notes: String!
  order: Int!
  video: String!
}

input FrameSequenceCreateWithoutFilmInput {
  artists: PersonCreateManyWithoutArtistsInput
  frames: FrameCreateManyWithoutFramesInput
  id: ID
  notes: String!
  order: Int!
  video: String!
}

input FrameSequenceCreateWithoutFramesInput {
  artists: PersonCreateManyWithoutArtistsInput
  film: FilmCreateOneWithoutFilmInput!
  id: ID
  notes: String!
  order: Int!
  video: String!
}

input FrameSequenceFilter {
  every: FrameSequenceWhereInput
  none: FrameSequenceWhereInput
  some: FrameSequenceWhereInput
}

input FrameSequenceScalarWhereInput {
  AND: [FrameSequenceScalarWhereInput!]
  artists: PersonFilter
  frames: FrameFilter
  id: StringFilter
  NOT: [FrameSequenceScalarWhereInput!]
  notes: StringFilter
  OR: [FrameSequenceScalarWhereInput!]
  order: IntFilter
  video: StringFilter
}

input FrameSequenceUpdateManyDataInput {
  id: ID
  notes: String
  order: Int
  video: String
}

input FrameSequenceUpdateManyWithoutFilmInput {
  connect: [FrameSequenceWhereUniqueInput!]
  create: [FrameSequenceCreateWithoutFilmInput!]
  delete: [FrameSequenceWhereUniqueInput!]
  deleteMany: [FrameSequenceScalarWhereInput!]
  disconnect: [FrameSequenceWhereUniqueInput!]
  set: [FrameSequenceWhereUniqueInput!]
  update: [FrameSequenceUpdateWithWhereUniqueWithoutFilmInput!]
  updateMany: [FrameSequenceUpdateManyWithWhereNestedInput!]
  upsert: [FrameSequenceUpsertWithWhereUniqueWithoutFilmInput!]
}

input FrameSequenceUpdateManyWithWhereNestedInput {
  data: FrameSequenceUpdateManyDataInput!
  where: FrameSequenceScalarWhereInput!
}

input FrameSequenceUpdateOneWithoutArtistsInput {
  connect: FrameSequenceWhereUniqueInput
  create: FrameSequenceCreateWithoutArtistsInput
  delete: Boolean
  disconnect: Boolean
  update: FrameSequenceUpdateWithoutArtistsDataInput
  upsert: FrameSequenceUpsertWithoutArtistsInput
}

input FrameSequenceUpdateOneWithoutFramesInput {
  connect: FrameSequenceWhereUniqueInput
  create: FrameSequenceCreateWithoutFramesInput
  delete: Boolean
  disconnect: Boolean
  update: FrameSequenceUpdateWithoutFramesDataInput
  upsert: FrameSequenceUpsertWithoutFramesInput
}

input FrameSequenceUpdateWithoutArtistsDataInput {
  film: FilmUpdateOneRequiredWithoutFrameSequencesInput
  frames: FrameUpdateManyWithoutFrameSequenceInput
  id: ID
  notes: String
  order: Int
  video: String
}

input FrameSequenceUpdateWithoutFilmDataInput {
  artists: PersonUpdateManyWithoutFrameSequenceInput
  frames: FrameUpdateManyWithoutFrameSequenceInput
  id: ID
  notes: String
  order: Int
  video: String
}

input FrameSequenceUpdateWithoutFramesDataInput {
  artists: PersonUpdateManyWithoutFrameSequenceInput
  film: FilmUpdateOneRequiredWithoutFrameSequencesInput
  id: ID
  notes: String
  order: Int
  video: String
}

input FrameSequenceUpdateWithWhereUniqueWithoutFilmInput {
  data: FrameSequenceUpdateWithoutFilmDataInput!
  where: FrameSequenceWhereUniqueInput!
}

input FrameSequenceUpsertWithoutArtistsInput {
  create: FrameSequenceCreateWithoutArtistsInput!
  update: FrameSequenceUpdateWithoutArtistsDataInput!
}

input FrameSequenceUpsertWithoutFramesInput {
  create: FrameSequenceCreateWithoutFramesInput!
  update: FrameSequenceUpdateWithoutFramesDataInput!
}

input FrameSequenceUpsertWithWhereUniqueWithoutFilmInput {
  create: FrameSequenceCreateWithoutFilmInput!
  update: FrameSequenceUpdateWithoutFilmDataInput!
  where: FrameSequenceWhereUniqueInput!
}

input FrameSequenceWhereInput {
  AND: [FrameSequenceWhereInput!]
  artists: PersonFilter
  film: FilmWhereInput
  frames: FrameFilter
  id: StringFilter
  NOT: [FrameSequenceWhereInput!]
  notes: StringFilter
  OR: [FrameSequenceWhereInput!]
  order: IntFilter
  video: StringFilter
}

input FrameSequenceWhereUniqueInput {
  id: ID
}

input FrameUpdateManyDataInput {
  id: ID
  keyframe: Boolean
  notes: String
  order: Int
}

input FrameUpdateManyWithoutArtistInput {
  connect: [FrameWhereUniqueInput!]
  create: [FrameCreateWithoutArtistInput!]
  delete: [FrameWhereUniqueInput!]
  deleteMany: [FrameScalarWhereInput!]
  disconnect: [FrameWhereUniqueInput!]
  set: [FrameWhereUniqueInput!]
  update: [FrameUpdateWithWhereUniqueWithoutArtistInput!]
  updateMany: [FrameUpdateManyWithWhereNestedInput!]
  upsert: [FrameUpsertWithWhereUniqueWithoutArtistInput!]
}

input FrameUpdateManyWithoutFrameSequenceInput {
  connect: [FrameWhereUniqueInput!]
  create: [FrameCreateWithoutFrameSequenceInput!]
  delete: [FrameWhereUniqueInput!]
  deleteMany: [FrameScalarWhereInput!]
  disconnect: [FrameWhereUniqueInput!]
  set: [FrameWhereUniqueInput!]
  update: [FrameUpdateWithWhereUniqueWithoutFrameSequenceInput!]
  updateMany: [FrameUpdateManyWithWhereNestedInput!]
  upsert: [FrameUpsertWithWhereUniqueWithoutFrameSequenceInput!]
}

input FrameUpdateManyWithoutImageInput {
  connect: [FrameWhereUniqueInput!]
  create: [FrameCreateWithoutImageInput!]
  delete: [FrameWhereUniqueInput!]
  deleteMany: [FrameScalarWhereInput!]
  disconnect: [FrameWhereUniqueInput!]
  set: [FrameWhereUniqueInput!]
  update: [FrameUpdateWithWhereUniqueWithoutImageInput!]
  updateMany: [FrameUpdateManyWithWhereNestedInput!]
  upsert: [FrameUpsertWithWhereUniqueWithoutImageInput!]
}

input FrameUpdateManyWithWhereNestedInput {
  data: FrameUpdateManyDataInput!
  where: FrameScalarWhereInput!
}

input FrameUpdateWithoutArtistDataInput {
  frameSequence: FrameSequenceUpdateOneWithoutFramesInput
  id: ID
  image: ImageUpdateOneRequiredWithoutFramesInput
  keyframe: Boolean
  notes: String
  order: Int
}

input FrameUpdateWithoutFrameSequenceDataInput {
  artist: PersonUpdateOneRequiredWithoutFramesInput
  id: ID
  image: ImageUpdateOneRequiredWithoutFramesInput
  keyframe: Boolean
  notes: String
  order: Int
}

input FrameUpdateWithoutImageDataInput {
  artist: PersonUpdateOneRequiredWithoutFramesInput
  frameSequence: FrameSequenceUpdateOneWithoutFramesInput
  id: ID
  keyframe: Boolean
  notes: String
  order: Int
}

input FrameUpdateWithWhereUniqueWithoutArtistInput {
  data: FrameUpdateWithoutArtistDataInput!
  where: FrameWhereUniqueInput!
}

input FrameUpdateWithWhereUniqueWithoutFrameSequenceInput {
  data: FrameUpdateWithoutFrameSequenceDataInput!
  where: FrameWhereUniqueInput!
}

input FrameUpdateWithWhereUniqueWithoutImageInput {
  data: FrameUpdateWithoutImageDataInput!
  where: FrameWhereUniqueInput!
}

input FrameUpsertWithWhereUniqueWithoutArtistInput {
  create: FrameCreateWithoutArtistInput!
  update: FrameUpdateWithoutArtistDataInput!
  where: FrameWhereUniqueInput!
}

input FrameUpsertWithWhereUniqueWithoutFrameSequenceInput {
  create: FrameCreateWithoutFrameSequenceInput!
  update: FrameUpdateWithoutFrameSequenceDataInput!
  where: FrameWhereUniqueInput!
}

input FrameUpsertWithWhereUniqueWithoutImageInput {
  create: FrameCreateWithoutImageInput!
  update: FrameUpdateWithoutImageDataInput!
  where: FrameWhereUniqueInput!
}

input FrameWhereInput {
  AND: [FrameWhereInput!]
  artist: PersonWhereInput
  frameSequence: FrameSequenceWhereInput
  id: StringFilter
  image: ImageWhereInput
  keyframe: BooleanFilter
  NOT: [FrameWhereInput!]
  notes: StringFilter
  OR: [FrameWhereInput!]
  order: IntFilter
}

input FrameWhereUniqueInput {
  id: ID
}

type Image {
  copyright: String
  id: ID!
  name: String!
  url: String!
}

input ImageCreateManyWithoutImagesInput {
  connect: [ImageWhereUniqueInput!]
  create: [ImageCreateWithoutReleaseInput!]
}

input ImageCreateOneWithoutImageInput {
  connect: ImageWhereUniqueInput
  create: ImageCreateWithoutFilmsInput
}

input ImageCreateWithoutFilmsInput {
  copyright: String
  frames: FrameCreateManyWithoutFramesInput
  id: ID
  name: String!
  persons: PersonCreateManyWithoutPersonsInput
  release: ReleaseCreateOneWithoutReleaseInput
  studios: StudioCreateManyWithoutStudiosInput
  url: String!
}

input ImageCreateWithoutFramesInput {
  copyright: String
  films: FilmCreateManyWithoutFilmsInput
  id: ID
  name: String!
  persons: PersonCreateManyWithoutPersonsInput
  release: ReleaseCreateOneWithoutReleaseInput
  studios: StudioCreateManyWithoutStudiosInput
  url: String!
}

input ImageCreateWithoutPersonsInput {
  copyright: String
  films: FilmCreateManyWithoutFilmsInput
  frames: FrameCreateManyWithoutFramesInput
  id: ID
  name: String!
  release: ReleaseCreateOneWithoutReleaseInput
  studios: StudioCreateManyWithoutStudiosInput
  url: String!
}

input ImageCreateWithoutReleaseInput {
  copyright: String
  films: FilmCreateManyWithoutFilmsInput
  frames: FrameCreateManyWithoutFramesInput
  id: ID
  name: String!
  persons: PersonCreateManyWithoutPersonsInput
  studios: StudioCreateManyWithoutStudiosInput
  url: String!
}

input ImageCreateWithoutStudiosInput {
  copyright: String
  films: FilmCreateManyWithoutFilmsInput
  frames: FrameCreateManyWithoutFramesInput
  id: ID
  name: String!
  persons: PersonCreateManyWithoutPersonsInput
  release: ReleaseCreateOneWithoutReleaseInput
  url: String!
}

input ImageFilter {
  every: ImageWhereInput
  none: ImageWhereInput
  some: ImageWhereInput
}

input ImageScalarWhereInput {
  AND: [ImageScalarWhereInput!]
  copyright: NullableStringFilter
  films: FilmFilter
  frames: FrameFilter
  id: StringFilter
  name: StringFilter
  NOT: [ImageScalarWhereInput!]
  OR: [ImageScalarWhereInput!]
  persons: PersonFilter
  studios: StudioFilter
  url: StringFilter
}

input ImageUpdateManyDataInput {
  copyright: String
  id: ID
  name: String
  url: String
}

input ImageUpdateManyWithoutReleaseInput {
  connect: [ImageWhereUniqueInput!]
  create: [ImageCreateWithoutReleaseInput!]
  delete: [ImageWhereUniqueInput!]
  deleteMany: [ImageScalarWhereInput!]
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueWithoutReleaseInput!]
  updateMany: [ImageUpdateManyWithWhereNestedInput!]
  upsert: [ImageUpsertWithWhereUniqueWithoutReleaseInput!]
}

input ImageUpdateManyWithWhereNestedInput {
  data: ImageUpdateManyDataInput!
  where: ImageScalarWhereInput!
}

input ImageUpdateOneRequiredWithoutFilmsInput {
  connect: ImageWhereUniqueInput
  create: ImageCreateWithoutFilmsInput
  update: ImageUpdateWithoutFilmsDataInput
  upsert: ImageUpsertWithoutFilmsInput
}

input ImageUpdateOneRequiredWithoutFramesInput {
  connect: ImageWhereUniqueInput
  create: ImageCreateWithoutFramesInput
  update: ImageUpdateWithoutFramesDataInput
  upsert: ImageUpsertWithoutFramesInput
}

input ImageUpdateOneWithoutPersonsInput {
  connect: ImageWhereUniqueInput
  create: ImageCreateWithoutPersonsInput
  delete: Boolean
  disconnect: Boolean
  update: ImageUpdateWithoutPersonsDataInput
  upsert: ImageUpsertWithoutPersonsInput
}

input ImageUpdateOneWithoutStudiosInput {
  connect: ImageWhereUniqueInput
  create: ImageCreateWithoutStudiosInput
  delete: Boolean
  disconnect: Boolean
  update: ImageUpdateWithoutStudiosDataInput
  upsert: ImageUpsertWithoutStudiosInput
}

input ImageUpdateWithoutFilmsDataInput {
  copyright: String
  frames: FrameUpdateManyWithoutImageInput
  id: ID
  name: String
  persons: PersonUpdateManyWithoutImageInput
  release: ReleaseUpdateOneWithoutImagesInput
  studios: StudioUpdateManyWithoutImageInput
  url: String
}

input ImageUpdateWithoutFramesDataInput {
  copyright: String
  films: FilmUpdateManyWithoutImageInput
  id: ID
  name: String
  persons: PersonUpdateManyWithoutImageInput
  release: ReleaseUpdateOneWithoutImagesInput
  studios: StudioUpdateManyWithoutImageInput
  url: String
}

input ImageUpdateWithoutPersonsDataInput {
  copyright: String
  films: FilmUpdateManyWithoutImageInput
  frames: FrameUpdateManyWithoutImageInput
  id: ID
  name: String
  release: ReleaseUpdateOneWithoutImagesInput
  studios: StudioUpdateManyWithoutImageInput
  url: String
}

input ImageUpdateWithoutReleaseDataInput {
  copyright: String
  films: FilmUpdateManyWithoutImageInput
  frames: FrameUpdateManyWithoutImageInput
  id: ID
  name: String
  persons: PersonUpdateManyWithoutImageInput
  studios: StudioUpdateManyWithoutImageInput
  url: String
}

input ImageUpdateWithoutStudiosDataInput {
  copyright: String
  films: FilmUpdateManyWithoutImageInput
  frames: FrameUpdateManyWithoutImageInput
  id: ID
  name: String
  persons: PersonUpdateManyWithoutImageInput
  release: ReleaseUpdateOneWithoutImagesInput
  url: String
}

input ImageUpdateWithWhereUniqueWithoutReleaseInput {
  data: ImageUpdateWithoutReleaseDataInput!
  where: ImageWhereUniqueInput!
}

input ImageUpsertWithoutFilmsInput {
  create: ImageCreateWithoutFilmsInput!
  update: ImageUpdateWithoutFilmsDataInput!
}

input ImageUpsertWithoutFramesInput {
  create: ImageCreateWithoutFramesInput!
  update: ImageUpdateWithoutFramesDataInput!
}

input ImageUpsertWithoutPersonsInput {
  create: ImageCreateWithoutPersonsInput!
  update: ImageUpdateWithoutPersonsDataInput!
}

input ImageUpsertWithoutStudiosInput {
  create: ImageCreateWithoutStudiosInput!
  update: ImageUpdateWithoutStudiosDataInput!
}

input ImageUpsertWithWhereUniqueWithoutReleaseInput {
  create: ImageCreateWithoutReleaseInput!
  update: ImageUpdateWithoutReleaseDataInput!
  where: ImageWhereUniqueInput!
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  copyright: NullableStringFilter
  films: FilmFilter
  frames: FrameFilter
  id: StringFilter
  name: StringFilter
  NOT: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  persons: PersonFilter
  release: ReleaseWhereInput
  studios: StudioFilter
  url: StringFilter
}

input ImageWhereUniqueInput {
  id: ID
  url: String
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  upsertOneFilm(create: FilmCreateInput!, update: FilmUpdateInput!, where: FilmWhereUniqueInput!): Film!
  upsertOnePerson(create: PersonCreateInput!, update: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person!
  upsertOneRelease(create: ReleaseCreateInput!, update: ReleaseUpdateInput!, where: ReleaseWhereUniqueInput!): Release!
  upsertOneStudio(create: StudioCreateInput!, update: StudioUpdateInput!, where: StudioWhereUniqueInput!): Studio!
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Person {
  animated(after: String, before: String, first: Int, last: Int, orderBy: PersonAnimatedOrderByInput, skip: Int, where: PersonAnimatedWhereInput): [Film!]!
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  composed(after: String, before: String, first: Int, last: Int, orderBy: PersonComposedOrderByInput, skip: Int, where: PersonComposedWhereInput): [Film!]!
  country: Country!
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  directed(after: String, before: String, first: Int, last: Int, orderBy: PersonDirectedOrderByInput, skip: Int, where: PersonDirectedWhereInput): [Film!]!
  firstName: String!
  founded(after: String, before: String, first: Int, last: Int, orderBy: PersonFoundedOrderByInput, skip: Int, where: PersonFoundedWhereInput): [Studio!]!
  id: String!
  image: Image
  kanji: String
  lastName: String!
}

input PersonAnimatedOrderByInput {
  releaseYear: OrderByArg
  title: OrderByArg
  titleEN: OrderByArg
  titleJP: OrderByArg
}

input PersonAnimatedWhereInput {
  releaseYear: IntFilter
}

input PersonComposedOrderByInput {
  releaseYear: OrderByArg
  title: OrderByArg
  titleEN: OrderByArg
  titleJP: OrderByArg
}

input PersonComposedWhereInput {
  releaseYear: IntFilter
}

input PersonCreateInput {
  alias: String
  animated: FilmCreateManyWithoutAnimatedInput
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  composed: FilmCreateManyWithoutComposedInput
  country: Country!
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  directed: FilmCreateManyWithoutDirectedInput
  film: FilmCreateOneWithoutFilmInput
  firstName: String!
  founded: StudioCreateManyWithoutFoundedInput
  frames: FrameCreateManyWithoutFramesInput
  frameSequence: FrameSequenceCreateOneWithoutFrameSequenceInput
  id: String!
  image: ImageCreateOneWithoutImageInput
  kanji: String
  lastName: String!
  website: String
}

input PersonCreateManyWithoutAnimatorsInput {
  connect: [PersonWhereUniqueInput!]
  create: [PersonCreateWithoutFilmInput!]
}

input PersonCreateManyWithoutArtistsInput {
  connect: [PersonWhereUniqueInput!]
  create: [PersonCreateWithoutFrameSequenceInput!]
}

input PersonCreateManyWithoutComposersInput {
  connect: [PersonWhereUniqueInput!]
  create: [PersonCreateWithoutComposedInput!]
}

input PersonCreateManyWithoutDirectorsInput {
  connect: [PersonWhereUniqueInput!]
  create: [PersonCreateWithoutDirectedInput!]
}

input PersonCreateManyWithoutFoundersInput {
  connect: [PersonWhereUniqueInput!]
  create: [PersonCreateWithoutFoundedInput!]
}

input PersonCreateManyWithoutPersonsInput {
  connect: [PersonWhereUniqueInput!]
  create: [PersonCreateWithoutImageInput!]
}

input PersonCreateOneWithoutArtistInput {
  connect: PersonWhereUniqueInput
  create: PersonCreateWithoutFramesInput
}

input PersonCreateOneWithoutPersonInput {
  connect: PersonWhereUniqueInput
  create: PersonCreateWithoutAnimatedInput
}

input PersonCreateWithoutAnimatedInput {
  alias: String
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  composed: FilmCreateManyWithoutComposedInput
  country: Country!
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  directed: FilmCreateManyWithoutDirectedInput
  film: FilmCreateOneWithoutFilmInput
  firstName: String!
  founded: StudioCreateManyWithoutFoundedInput
  frames: FrameCreateManyWithoutFramesInput
  frameSequence: FrameSequenceCreateOneWithoutFrameSequenceInput
  id: String!
  image: ImageCreateOneWithoutImageInput
  kanji: String
  lastName: String!
  website: String
}

input PersonCreateWithoutComposedInput {
  alias: String
  animated: FilmCreateManyWithoutAnimatedInput
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  country: Country!
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  directed: FilmCreateManyWithoutDirectedInput
  film: FilmCreateOneWithoutFilmInput
  firstName: String!
  founded: StudioCreateManyWithoutFoundedInput
  frames: FrameCreateManyWithoutFramesInput
  frameSequence: FrameSequenceCreateOneWithoutFrameSequenceInput
  id: String!
  image: ImageCreateOneWithoutImageInput
  kanji: String
  lastName: String!
  website: String
}

input PersonCreateWithoutDirectedInput {
  alias: String
  animated: FilmCreateManyWithoutAnimatedInput
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  composed: FilmCreateManyWithoutComposedInput
  country: Country!
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  film: FilmCreateOneWithoutFilmInput
  firstName: String!
  founded: StudioCreateManyWithoutFoundedInput
  frames: FrameCreateManyWithoutFramesInput
  frameSequence: FrameSequenceCreateOneWithoutFrameSequenceInput
  id: String!
  image: ImageCreateOneWithoutImageInput
  kanji: String
  lastName: String!
  website: String
}

input PersonCreateWithoutFilmInput {
  alias: String
  animated: FilmCreateManyWithoutAnimatedInput
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  composed: FilmCreateManyWithoutComposedInput
  country: Country!
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  directed: FilmCreateManyWithoutDirectedInput
  firstName: String!
  founded: StudioCreateManyWithoutFoundedInput
  frames: FrameCreateManyWithoutFramesInput
  frameSequence: FrameSequenceCreateOneWithoutFrameSequenceInput
  id: String!
  image: ImageCreateOneWithoutImageInput
  kanji: String
  lastName: String!
  website: String
}

input PersonCreateWithoutFoundedInput {
  alias: String
  animated: FilmCreateManyWithoutAnimatedInput
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  composed: FilmCreateManyWithoutComposedInput
  country: Country!
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  directed: FilmCreateManyWithoutDirectedInput
  film: FilmCreateOneWithoutFilmInput
  firstName: String!
  frames: FrameCreateManyWithoutFramesInput
  frameSequence: FrameSequenceCreateOneWithoutFrameSequenceInput
  id: String!
  image: ImageCreateOneWithoutImageInput
  kanji: String
  lastName: String!
  website: String
}

input PersonCreateWithoutFrameSequenceInput {
  alias: String
  animated: FilmCreateManyWithoutAnimatedInput
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  composed: FilmCreateManyWithoutComposedInput
  country: Country!
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  directed: FilmCreateManyWithoutDirectedInput
  film: FilmCreateOneWithoutFilmInput
  firstName: String!
  founded: StudioCreateManyWithoutFoundedInput
  frames: FrameCreateManyWithoutFramesInput
  id: String!
  image: ImageCreateOneWithoutImageInput
  kanji: String
  lastName: String!
  website: String
}

input PersonCreateWithoutFramesInput {
  alias: String
  animated: FilmCreateManyWithoutAnimatedInput
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  composed: FilmCreateManyWithoutComposedInput
  country: Country!
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  directed: FilmCreateManyWithoutDirectedInput
  film: FilmCreateOneWithoutFilmInput
  firstName: String!
  founded: StudioCreateManyWithoutFoundedInput
  frameSequence: FrameSequenceCreateOneWithoutFrameSequenceInput
  id: String!
  image: ImageCreateOneWithoutImageInput
  kanji: String
  lastName: String!
  website: String
}

input PersonCreateWithoutImageInput {
  alias: String
  animated: FilmCreateManyWithoutAnimatedInput
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  composed: FilmCreateManyWithoutComposedInput
  country: Country!
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  directed: FilmCreateManyWithoutDirectedInput
  film: FilmCreateOneWithoutFilmInput
  firstName: String!
  founded: StudioCreateManyWithoutFoundedInput
  frames: FrameCreateManyWithoutFramesInput
  frameSequence: FrameSequenceCreateOneWithoutFrameSequenceInput
  id: String!
  kanji: String
  lastName: String!
  website: String
}

input PersonDirectedOrderByInput {
  releaseYear: OrderByArg
  title: OrderByArg
  titleEN: OrderByArg
  titleJP: OrderByArg
}

input PersonDirectedWhereInput {
  releaseYear: IntFilter
}

input PersonFilter {
  every: PersonWhereInput
  none: PersonWhereInput
  some: PersonWhereInput
}

input PersonFoundedOrderByInput {
  foundedYear: OrderByArg
  name: OrderByArg
}

input PersonFoundedWhereInput {
  country: Country
  foundedYear: IntFilter
}

input PersonScalarWhereInput {
  alias: NullableStringFilter
  AND: [PersonScalarWhereInput!]
  animated: FilmFilter
  birthDay: NullableIntFilter
  birthMonth: NullableIntFilter
  birthYear: NullableIntFilter
  composed: FilmFilter
  country: Country
  deathDay: NullableIntFilter
  deathMonth: NullableIntFilter
  deathYear: NullableIntFilter
  description: NullableStringFilter
  directed: FilmFilter
  firstName: StringFilter
  founded: StudioFilter
  frames: FrameFilter
  id: StringFilter
  kanji: NullableStringFilter
  lastName: StringFilter
  NOT: [PersonScalarWhereInput!]
  OR: [PersonScalarWhereInput!]
  website: NullableStringFilter
}

input PersonUpdateInput {
  alias: String
  animated: FilmUpdateManyWithoutPersonInput
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  composed: FilmUpdateManyWithoutComposersInput
  country: Country
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  directed: FilmUpdateManyWithoutDirectorsInput
  film: FilmUpdateOneWithoutAnimatorsInput
  firstName: String
  founded: StudioUpdateManyWithoutFoundersInput
  frames: FrameUpdateManyWithoutArtistInput
  frameSequence: FrameSequenceUpdateOneWithoutArtistsInput
  id: String
  image: ImageUpdateOneWithoutPersonsInput
  kanji: String
  lastName: String
  website: String
}

input PersonUpdateManyDataInput {
  alias: String
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  country: Country
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  firstName: String
  id: String
  kanji: String
  lastName: String
  website: String
}

input PersonUpdateManyWithoutComposedInput {
  connect: [PersonWhereUniqueInput!]
  create: [PersonCreateWithoutComposedInput!]
  delete: [PersonWhereUniqueInput!]
  deleteMany: [PersonScalarWhereInput!]
  disconnect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
  update: [PersonUpdateWithWhereUniqueWithoutComposedInput!]
  updateMany: [PersonUpdateManyWithWhereNestedInput!]
  upsert: [PersonUpsertWithWhereUniqueWithoutComposedInput!]
}

input PersonUpdateManyWithoutDirectedInput {
  connect: [PersonWhereUniqueInput!]
  create: [PersonCreateWithoutDirectedInput!]
  delete: [PersonWhereUniqueInput!]
  deleteMany: [PersonScalarWhereInput!]
  disconnect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
  update: [PersonUpdateWithWhereUniqueWithoutDirectedInput!]
  updateMany: [PersonUpdateManyWithWhereNestedInput!]
  upsert: [PersonUpsertWithWhereUniqueWithoutDirectedInput!]
}

input PersonUpdateManyWithoutFilmInput {
  connect: [PersonWhereUniqueInput!]
  create: [PersonCreateWithoutFilmInput!]
  delete: [PersonWhereUniqueInput!]
  deleteMany: [PersonScalarWhereInput!]
  disconnect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
  update: [PersonUpdateWithWhereUniqueWithoutFilmInput!]
  updateMany: [PersonUpdateManyWithWhereNestedInput!]
  upsert: [PersonUpsertWithWhereUniqueWithoutFilmInput!]
}

input PersonUpdateManyWithoutFoundedInput {
  connect: [PersonWhereUniqueInput!]
  create: [PersonCreateWithoutFoundedInput!]
  delete: [PersonWhereUniqueInput!]
  deleteMany: [PersonScalarWhereInput!]
  disconnect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
  update: [PersonUpdateWithWhereUniqueWithoutFoundedInput!]
  updateMany: [PersonUpdateManyWithWhereNestedInput!]
  upsert: [PersonUpsertWithWhereUniqueWithoutFoundedInput!]
}

input PersonUpdateManyWithoutFrameSequenceInput {
  connect: [PersonWhereUniqueInput!]
  create: [PersonCreateWithoutFrameSequenceInput!]
  delete: [PersonWhereUniqueInput!]
  deleteMany: [PersonScalarWhereInput!]
  disconnect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
  update: [PersonUpdateWithWhereUniqueWithoutFrameSequenceInput!]
  updateMany: [PersonUpdateManyWithWhereNestedInput!]
  upsert: [PersonUpsertWithWhereUniqueWithoutFrameSequenceInput!]
}

input PersonUpdateManyWithoutImageInput {
  connect: [PersonWhereUniqueInput!]
  create: [PersonCreateWithoutImageInput!]
  delete: [PersonWhereUniqueInput!]
  deleteMany: [PersonScalarWhereInput!]
  disconnect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
  update: [PersonUpdateWithWhereUniqueWithoutImageInput!]
  updateMany: [PersonUpdateManyWithWhereNestedInput!]
  upsert: [PersonUpsertWithWhereUniqueWithoutImageInput!]
}

input PersonUpdateManyWithWhereNestedInput {
  data: PersonUpdateManyDataInput!
  where: PersonScalarWhereInput!
}

input PersonUpdateOneRequiredWithoutFramesInput {
  connect: PersonWhereUniqueInput
  create: PersonCreateWithoutFramesInput
  update: PersonUpdateWithoutFramesDataInput
  upsert: PersonUpsertWithoutFramesInput
}

input PersonUpdateOneWithoutAnimatedInput {
  connect: PersonWhereUniqueInput
  create: PersonCreateWithoutAnimatedInput
  delete: Boolean
  disconnect: Boolean
  update: PersonUpdateWithoutAnimatedDataInput
  upsert: PersonUpsertWithoutAnimatedInput
}

input PersonUpdateWithoutAnimatedDataInput {
  alias: String
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  composed: FilmUpdateManyWithoutComposersInput
  country: Country
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  directed: FilmUpdateManyWithoutDirectorsInput
  film: FilmUpdateOneWithoutAnimatorsInput
  firstName: String
  founded: StudioUpdateManyWithoutFoundersInput
  frames: FrameUpdateManyWithoutArtistInput
  frameSequence: FrameSequenceUpdateOneWithoutArtistsInput
  id: String
  image: ImageUpdateOneWithoutPersonsInput
  kanji: String
  lastName: String
  website: String
}

input PersonUpdateWithoutComposedDataInput {
  alias: String
  animated: FilmUpdateManyWithoutPersonInput
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  country: Country
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  directed: FilmUpdateManyWithoutDirectorsInput
  film: FilmUpdateOneWithoutAnimatorsInput
  firstName: String
  founded: StudioUpdateManyWithoutFoundersInput
  frames: FrameUpdateManyWithoutArtistInput
  frameSequence: FrameSequenceUpdateOneWithoutArtistsInput
  id: String
  image: ImageUpdateOneWithoutPersonsInput
  kanji: String
  lastName: String
  website: String
}

input PersonUpdateWithoutDirectedDataInput {
  alias: String
  animated: FilmUpdateManyWithoutPersonInput
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  composed: FilmUpdateManyWithoutComposersInput
  country: Country
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  film: FilmUpdateOneWithoutAnimatorsInput
  firstName: String
  founded: StudioUpdateManyWithoutFoundersInput
  frames: FrameUpdateManyWithoutArtistInput
  frameSequence: FrameSequenceUpdateOneWithoutArtistsInput
  id: String
  image: ImageUpdateOneWithoutPersonsInput
  kanji: String
  lastName: String
  website: String
}

input PersonUpdateWithoutFilmDataInput {
  alias: String
  animated: FilmUpdateManyWithoutPersonInput
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  composed: FilmUpdateManyWithoutComposersInput
  country: Country
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  directed: FilmUpdateManyWithoutDirectorsInput
  firstName: String
  founded: StudioUpdateManyWithoutFoundersInput
  frames: FrameUpdateManyWithoutArtistInput
  frameSequence: FrameSequenceUpdateOneWithoutArtistsInput
  id: String
  image: ImageUpdateOneWithoutPersonsInput
  kanji: String
  lastName: String
  website: String
}

input PersonUpdateWithoutFoundedDataInput {
  alias: String
  animated: FilmUpdateManyWithoutPersonInput
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  composed: FilmUpdateManyWithoutComposersInput
  country: Country
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  directed: FilmUpdateManyWithoutDirectorsInput
  film: FilmUpdateOneWithoutAnimatorsInput
  firstName: String
  frames: FrameUpdateManyWithoutArtistInput
  frameSequence: FrameSequenceUpdateOneWithoutArtistsInput
  id: String
  image: ImageUpdateOneWithoutPersonsInput
  kanji: String
  lastName: String
  website: String
}

input PersonUpdateWithoutFramesDataInput {
  alias: String
  animated: FilmUpdateManyWithoutPersonInput
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  composed: FilmUpdateManyWithoutComposersInput
  country: Country
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  directed: FilmUpdateManyWithoutDirectorsInput
  film: FilmUpdateOneWithoutAnimatorsInput
  firstName: String
  founded: StudioUpdateManyWithoutFoundersInput
  frameSequence: FrameSequenceUpdateOneWithoutArtistsInput
  id: String
  image: ImageUpdateOneWithoutPersonsInput
  kanji: String
  lastName: String
  website: String
}

input PersonUpdateWithoutFrameSequenceDataInput {
  alias: String
  animated: FilmUpdateManyWithoutPersonInput
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  composed: FilmUpdateManyWithoutComposersInput
  country: Country
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  directed: FilmUpdateManyWithoutDirectorsInput
  film: FilmUpdateOneWithoutAnimatorsInput
  firstName: String
  founded: StudioUpdateManyWithoutFoundersInput
  frames: FrameUpdateManyWithoutArtistInput
  id: String
  image: ImageUpdateOneWithoutPersonsInput
  kanji: String
  lastName: String
  website: String
}

input PersonUpdateWithoutImageDataInput {
  alias: String
  animated: FilmUpdateManyWithoutPersonInput
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  composed: FilmUpdateManyWithoutComposersInput
  country: Country
  deathDay: Int
  deathMonth: Int
  deathYear: Int
  description: String
  directed: FilmUpdateManyWithoutDirectorsInput
  film: FilmUpdateOneWithoutAnimatorsInput
  firstName: String
  founded: StudioUpdateManyWithoutFoundersInput
  frames: FrameUpdateManyWithoutArtistInput
  frameSequence: FrameSequenceUpdateOneWithoutArtistsInput
  id: String
  kanji: String
  lastName: String
  website: String
}

input PersonUpdateWithWhereUniqueWithoutComposedInput {
  data: PersonUpdateWithoutComposedDataInput!
  where: PersonWhereUniqueInput!
}

input PersonUpdateWithWhereUniqueWithoutDirectedInput {
  data: PersonUpdateWithoutDirectedDataInput!
  where: PersonWhereUniqueInput!
}

input PersonUpdateWithWhereUniqueWithoutFilmInput {
  data: PersonUpdateWithoutFilmDataInput!
  where: PersonWhereUniqueInput!
}

input PersonUpdateWithWhereUniqueWithoutFoundedInput {
  data: PersonUpdateWithoutFoundedDataInput!
  where: PersonWhereUniqueInput!
}

input PersonUpdateWithWhereUniqueWithoutFrameSequenceInput {
  data: PersonUpdateWithoutFrameSequenceDataInput!
  where: PersonWhereUniqueInput!
}

input PersonUpdateWithWhereUniqueWithoutImageInput {
  data: PersonUpdateWithoutImageDataInput!
  where: PersonWhereUniqueInput!
}

input PersonUpsertWithoutAnimatedInput {
  create: PersonCreateWithoutAnimatedInput!
  update: PersonUpdateWithoutAnimatedDataInput!
}

input PersonUpsertWithoutFramesInput {
  create: PersonCreateWithoutFramesInput!
  update: PersonUpdateWithoutFramesDataInput!
}

input PersonUpsertWithWhereUniqueWithoutComposedInput {
  create: PersonCreateWithoutComposedInput!
  update: PersonUpdateWithoutComposedDataInput!
  where: PersonWhereUniqueInput!
}

input PersonUpsertWithWhereUniqueWithoutDirectedInput {
  create: PersonCreateWithoutDirectedInput!
  update: PersonUpdateWithoutDirectedDataInput!
  where: PersonWhereUniqueInput!
}

input PersonUpsertWithWhereUniqueWithoutFilmInput {
  create: PersonCreateWithoutFilmInput!
  update: PersonUpdateWithoutFilmDataInput!
  where: PersonWhereUniqueInput!
}

input PersonUpsertWithWhereUniqueWithoutFoundedInput {
  create: PersonCreateWithoutFoundedInput!
  update: PersonUpdateWithoutFoundedDataInput!
  where: PersonWhereUniqueInput!
}

input PersonUpsertWithWhereUniqueWithoutFrameSequenceInput {
  create: PersonCreateWithoutFrameSequenceInput!
  update: PersonUpdateWithoutFrameSequenceDataInput!
  where: PersonWhereUniqueInput!
}

input PersonUpsertWithWhereUniqueWithoutImageInput {
  create: PersonCreateWithoutImageInput!
  update: PersonUpdateWithoutImageDataInput!
  where: PersonWhereUniqueInput!
}

input PersonWhereInput {
  alias: NullableStringFilter
  AND: [PersonWhereInput!]
  animated: FilmFilter
  birthDay: NullableIntFilter
  birthMonth: NullableIntFilter
  birthYear: NullableIntFilter
  composed: FilmFilter
  country: Country
  deathDay: NullableIntFilter
  deathMonth: NullableIntFilter
  deathYear: NullableIntFilter
  description: NullableStringFilter
  directed: FilmFilter
  film: FilmWhereInput
  firstName: StringFilter
  founded: StudioFilter
  frames: FrameFilter
  frameSequence: FrameSequenceWhereInput
  id: StringFilter
  image: ImageWhereInput
  kanji: NullableStringFilter
  lastName: StringFilter
  NOT: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  website: NullableStringFilter
}

input PersonWhereUniqueInput {
  id: String
}

type Query {
  film(where: FilmWhereUniqueInput!): Film
  films(after: String, before: String, first: Int, last: Int, orderBy: QueryFilmsOrderByInput, skip: Int, where: QueryFilmsWhereInput): [Film!]!
  people(after: String, before: String, first: Int, last: Int, orderBy: QueryPeopleOrderByInput, skip: Int, where: QueryPeopleWhereInput): [Person!]!
  person(where: PersonWhereUniqueInput!): Person
  studio(where: StudioWhereUniqueInput!): Studio
  studios(after: String, before: String, first: Int, last: Int, orderBy: QueryStudiosOrderByInput, skip: Int, where: QueryStudiosWhereInput): [Studio!]!
}

input QueryFilmsOrderByInput {
  releaseYear: OrderByArg
  title: OrderByArg
  titleEN: OrderByArg
  titleJP: OrderByArg
}

input QueryFilmsWhereInput {
  releaseYear: IntFilter
}

input QueryPeopleOrderByInput {
  alias: OrderByArg
  birthYear: OrderByArg
  country: OrderByArg
  firstName: OrderByArg
  lastName: OrderByArg
}

input QueryPeopleWhereInput {
  birthYear: NullableIntFilter
  country: Country
}

input QueryStudiosOrderByInput {
  foundedYear: OrderByArg
  name: OrderByArg
}

input QueryStudiosWhereInput {
  country: Country
  foundedYear: IntFilter
}

type Release {
  country: Country!
  film: Film!
  format: String!
  id: ID!
  images(after: ID, before: ID, first: Int, last: Int, skip: Int): [Image!]!
  notes: String
  region: String!
  releaseDay: Int
  releaseMonth: Int
  releaseYear: Int!
  runtime: Int!
}

input ReleaseCreateInput {
  country: Country!
  film: FilmCreateOneWithoutFilmInput!
  format: String!
  id: ID
  images: ImageCreateManyWithoutImagesInput
  notes: String
  region: String!
  releaseDay: Int
  releaseMonth: Int
  releaseYear: Int!
  runtime: Int!
}

input ReleaseCreateManyWithoutReleasesInput {
  connect: [ReleaseWhereUniqueInput!]
  create: [ReleaseCreateWithoutFilmInput!]
}

input ReleaseCreateOneWithoutReleaseInput {
  connect: ReleaseWhereUniqueInput
  create: ReleaseCreateWithoutImagesInput
}

input ReleaseCreateWithoutFilmInput {
  country: Country!
  format: String!
  id: ID
  images: ImageCreateManyWithoutImagesInput
  notes: String
  region: String!
  releaseDay: Int
  releaseMonth: Int
  releaseYear: Int!
  runtime: Int!
}

input ReleaseCreateWithoutImagesInput {
  country: Country!
  film: FilmCreateOneWithoutFilmInput!
  format: String!
  id: ID
  notes: String
  region: String!
  releaseDay: Int
  releaseMonth: Int
  releaseYear: Int!
  runtime: Int!
}

input ReleaseFilter {
  every: ReleaseWhereInput
  none: ReleaseWhereInput
  some: ReleaseWhereInput
}

input ReleaseScalarWhereInput {
  AND: [ReleaseScalarWhereInput!]
  country: Country
  format: StringFilter
  id: StringFilter
  images: ImageFilter
  NOT: [ReleaseScalarWhereInput!]
  notes: NullableStringFilter
  OR: [ReleaseScalarWhereInput!]
  region: StringFilter
  releaseDay: NullableIntFilter
  releaseMonth: NullableIntFilter
  releaseYear: IntFilter
  runtime: IntFilter
}

input ReleaseUpdateInput {
  country: Country
  film: FilmUpdateOneRequiredWithoutReleasesInput
  format: String
  id: ID
  images: ImageUpdateManyWithoutReleaseInput
  notes: String
  region: String
  releaseDay: Int
  releaseMonth: Int
  releaseYear: Int
  runtime: Int
}

input ReleaseUpdateManyDataInput {
  country: Country
  format: String
  id: ID
  notes: String
  region: String
  releaseDay: Int
  releaseMonth: Int
  releaseYear: Int
  runtime: Int
}

input ReleaseUpdateManyWithoutFilmInput {
  connect: [ReleaseWhereUniqueInput!]
  create: [ReleaseCreateWithoutFilmInput!]
  delete: [ReleaseWhereUniqueInput!]
  deleteMany: [ReleaseScalarWhereInput!]
  disconnect: [ReleaseWhereUniqueInput!]
  set: [ReleaseWhereUniqueInput!]
  update: [ReleaseUpdateWithWhereUniqueWithoutFilmInput!]
  updateMany: [ReleaseUpdateManyWithWhereNestedInput!]
  upsert: [ReleaseUpsertWithWhereUniqueWithoutFilmInput!]
}

input ReleaseUpdateManyWithWhereNestedInput {
  data: ReleaseUpdateManyDataInput!
  where: ReleaseScalarWhereInput!
}

input ReleaseUpdateOneWithoutImagesInput {
  connect: ReleaseWhereUniqueInput
  create: ReleaseCreateWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  update: ReleaseUpdateWithoutImagesDataInput
  upsert: ReleaseUpsertWithoutImagesInput
}

input ReleaseUpdateWithoutFilmDataInput {
  country: Country
  format: String
  id: ID
  images: ImageUpdateManyWithoutReleaseInput
  notes: String
  region: String
  releaseDay: Int
  releaseMonth: Int
  releaseYear: Int
  runtime: Int
}

input ReleaseUpdateWithoutImagesDataInput {
  country: Country
  film: FilmUpdateOneRequiredWithoutReleasesInput
  format: String
  id: ID
  notes: String
  region: String
  releaseDay: Int
  releaseMonth: Int
  releaseYear: Int
  runtime: Int
}

input ReleaseUpdateWithWhereUniqueWithoutFilmInput {
  data: ReleaseUpdateWithoutFilmDataInput!
  where: ReleaseWhereUniqueInput!
}

input ReleaseUpsertWithoutImagesInput {
  create: ReleaseCreateWithoutImagesInput!
  update: ReleaseUpdateWithoutImagesDataInput!
}

input ReleaseUpsertWithWhereUniqueWithoutFilmInput {
  create: ReleaseCreateWithoutFilmInput!
  update: ReleaseUpdateWithoutFilmDataInput!
  where: ReleaseWhereUniqueInput!
}

input ReleaseWhereInput {
  AND: [ReleaseWhereInput!]
  country: Country
  film: FilmWhereInput
  format: StringFilter
  id: StringFilter
  images: ImageFilter
  NOT: [ReleaseWhereInput!]
  notes: NullableStringFilter
  OR: [ReleaseWhereInput!]
  region: StringFilter
  releaseDay: NullableIntFilter
  releaseMonth: NullableIntFilter
  releaseYear: IntFilter
  runtime: IntFilter
}

input ReleaseWhereUniqueInput {
  id: ID
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Studio {
  city: String
  country: Country!
  foundedYear: Int!
  founders(after: String, before: String, first: Int, last: Int, orderBy: StudioFoundersOrderByInput, skip: Int, where: StudioFoundersWhereInput): [Person!]!
  id: String!
  image: Image
  name: String!
}

input StudioCreateInput {
  city: String
  country: Country!
  films: FilmCreateManyWithoutFilmsInput
  foundedYear: Int!
  founders: PersonCreateManyWithoutFoundersInput
  id: String!
  image: ImageCreateOneWithoutImageInput
  name: String!
}

input StudioCreateManyWithoutFoundedInput {
  connect: [StudioWhereUniqueInput!]
  create: [StudioCreateWithoutFoundersInput!]
}

input StudioCreateManyWithoutStudiosInput {
  connect: [StudioWhereUniqueInput!]
  create: [StudioCreateWithoutImageInput!]
}

input StudioCreateOneWithoutStudioInput {
  connect: StudioWhereUniqueInput
  create: StudioCreateWithoutFilmsInput
}

input StudioCreateWithoutFilmsInput {
  city: String
  country: Country!
  foundedYear: Int!
  founders: PersonCreateManyWithoutFoundersInput
  id: String!
  image: ImageCreateOneWithoutImageInput
  name: String!
}

input StudioCreateWithoutFoundersInput {
  city: String
  country: Country!
  films: FilmCreateManyWithoutFilmsInput
  foundedYear: Int!
  id: String!
  image: ImageCreateOneWithoutImageInput
  name: String!
}

input StudioCreateWithoutImageInput {
  city: String
  country: Country!
  films: FilmCreateManyWithoutFilmsInput
  foundedYear: Int!
  founders: PersonCreateManyWithoutFoundersInput
  id: String!
  name: String!
}

input StudioFilter {
  every: StudioWhereInput
  none: StudioWhereInput
  some: StudioWhereInput
}

input StudioFoundersOrderByInput {
  alias: OrderByArg
  birthYear: OrderByArg
  country: OrderByArg
  firstName: OrderByArg
  lastName: OrderByArg
}

input StudioFoundersWhereInput {
  birthYear: NullableIntFilter
  country: Country
}

input StudioScalarWhereInput {
  AND: [StudioScalarWhereInput!]
  city: NullableStringFilter
  country: Country
  films: FilmFilter
  foundedYear: IntFilter
  founders: PersonFilter
  id: StringFilter
  name: StringFilter
  NOT: [StudioScalarWhereInput!]
  OR: [StudioScalarWhereInput!]
}

input StudioUpdateInput {
  city: String
  country: Country
  films: FilmUpdateManyWithoutStudioInput
  foundedYear: Int
  founders: PersonUpdateManyWithoutFoundedInput
  id: String
  image: ImageUpdateOneWithoutStudiosInput
  name: String
}

input StudioUpdateManyDataInput {
  city: String
  country: Country
  foundedYear: Int
  id: String
  name: String
}

input StudioUpdateManyWithoutFoundersInput {
  connect: [StudioWhereUniqueInput!]
  create: [StudioCreateWithoutFoundersInput!]
  delete: [StudioWhereUniqueInput!]
  deleteMany: [StudioScalarWhereInput!]
  disconnect: [StudioWhereUniqueInput!]
  set: [StudioWhereUniqueInput!]
  update: [StudioUpdateWithWhereUniqueWithoutFoundersInput!]
  updateMany: [StudioUpdateManyWithWhereNestedInput!]
  upsert: [StudioUpsertWithWhereUniqueWithoutFoundersInput!]
}

input StudioUpdateManyWithoutImageInput {
  connect: [StudioWhereUniqueInput!]
  create: [StudioCreateWithoutImageInput!]
  delete: [StudioWhereUniqueInput!]
  deleteMany: [StudioScalarWhereInput!]
  disconnect: [StudioWhereUniqueInput!]
  set: [StudioWhereUniqueInput!]
  update: [StudioUpdateWithWhereUniqueWithoutImageInput!]
  updateMany: [StudioUpdateManyWithWhereNestedInput!]
  upsert: [StudioUpsertWithWhereUniqueWithoutImageInput!]
}

input StudioUpdateManyWithWhereNestedInput {
  data: StudioUpdateManyDataInput!
  where: StudioScalarWhereInput!
}

input StudioUpdateOneWithoutFilmsInput {
  connect: StudioWhereUniqueInput
  create: StudioCreateWithoutFilmsInput
  delete: Boolean
  disconnect: Boolean
  update: StudioUpdateWithoutFilmsDataInput
  upsert: StudioUpsertWithoutFilmsInput
}

input StudioUpdateWithoutFilmsDataInput {
  city: String
  country: Country
  foundedYear: Int
  founders: PersonUpdateManyWithoutFoundedInput
  id: String
  image: ImageUpdateOneWithoutStudiosInput
  name: String
}

input StudioUpdateWithoutFoundersDataInput {
  city: String
  country: Country
  films: FilmUpdateManyWithoutStudioInput
  foundedYear: Int
  id: String
  image: ImageUpdateOneWithoutStudiosInput
  name: String
}

input StudioUpdateWithoutImageDataInput {
  city: String
  country: Country
  films: FilmUpdateManyWithoutStudioInput
  foundedYear: Int
  founders: PersonUpdateManyWithoutFoundedInput
  id: String
  name: String
}

input StudioUpdateWithWhereUniqueWithoutFoundersInput {
  data: StudioUpdateWithoutFoundersDataInput!
  where: StudioWhereUniqueInput!
}

input StudioUpdateWithWhereUniqueWithoutImageInput {
  data: StudioUpdateWithoutImageDataInput!
  where: StudioWhereUniqueInput!
}

input StudioUpsertWithoutFilmsInput {
  create: StudioCreateWithoutFilmsInput!
  update: StudioUpdateWithoutFilmsDataInput!
}

input StudioUpsertWithWhereUniqueWithoutFoundersInput {
  create: StudioCreateWithoutFoundersInput!
  update: StudioUpdateWithoutFoundersDataInput!
  where: StudioWhereUniqueInput!
}

input StudioUpsertWithWhereUniqueWithoutImageInput {
  create: StudioCreateWithoutImageInput!
  update: StudioUpdateWithoutImageDataInput!
  where: StudioWhereUniqueInput!
}

input StudioWhereInput {
  AND: [StudioWhereInput!]
  city: NullableStringFilter
  country: Country
  films: FilmFilter
  foundedYear: IntFilter
  founders: PersonFilter
  id: StringFilter
  image: ImageWhereInput
  name: StringFilter
  NOT: [StudioWhereInput!]
  OR: [StudioWhereInput!]
}

input StudioWhereUniqueInput {
  id: String
  name: String
}
